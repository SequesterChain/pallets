
//! Autogenerated weights for pallet_donations
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-10-28, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `Brendans-MacBook-Pro.local`, CPU: `<UNKNOWN>`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./target/release/parachain-template-node
// benchmark
// pallet
// --chain
// dev
// --execution=wasm
// --wasm-execution=compiled
// --pallet
// pallet_donations
// --extrinsic
// *
// --steps
// 50
// --repeat
// 20
// --template
// ./.maintain/frame-weight-template.hbs
// --output
// pallets/donations/src/weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_donations.
pub trait WeightInfo {
	fn submit_unsigned() -> Weight;
	fn xcm_transfer_to_sequester() -> Weight;
	fn spend_funds() -> Weight;
}

/// Weights for pallet_donations using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	// Storage: Donations FeesToSend (r:1 w:1)
	// Storage: Donations NextUnsignedAt (r:0 w:1)
	fn submit_unsigned() -> Weight {
		// Minimum execution time:  nanoseconds.
		Weight::from_ref_time(14_000_000 as u64)
			.saturating_add(T::DbWeight::get().reads(1 as u64))
			.saturating_add(T::DbWeight::get().writes(2 as u64))
	}
	fn xcm_transfer_to_sequester() -> Weight {
		// Minimum execution time:  nanoseconds.
		Weight::from_ref_time(11_000_000 as u64)
	}
	// Storage: Donations FeesToSend (r:1 w:0)
	fn spend_funds() -> Weight {
		// Minimum execution time:  nanoseconds.
		Weight::from_ref_time(7_000_000 as u64)
			.saturating_add(T::DbWeight::get().reads(1 as u64))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	// Storage: Donations FeesToSend (r:1 w:1)
	// Storage: Donations NextUnsignedAt (r:0 w:1)
	fn submit_unsigned() -> Weight {
		// Minimum execution time:  nanoseconds.
		Weight::from_ref_time(14_000_000 as u64)
			.saturating_add(RocksDbWeight::get().reads(1 as u64))
			.saturating_add(RocksDbWeight::get().writes(2 as u64))
	}
	fn xcm_transfer_to_sequester() -> Weight {
		// Minimum execution time:  nanoseconds.
		Weight::from_ref_time(11_000_000 as u64)
	}
	// Storage: Donations FeesToSend (r:1 w:0)
	fn spend_funds() -> Weight {
		// Minimum execution time:  nanoseconds.
		Weight::from_ref_time(7_000_000 as u64)
			.saturating_add(RocksDbWeight::get().reads(1 as u64))
	}
}